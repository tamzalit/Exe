import { MerkelConfiguration } from './index';
import { TaskList } from './migration';
export declare class HookAlreadyFoundError extends Error {
}
export declare class NoCommitsError extends Error {
}
export declare class UnknownCommitError extends Error {
    constructor(commit: Commit);
}
export declare class GitParseError extends Error {
}
export declare class CommitSequence extends Array<Commit> {
    /**
     * Wether the HEAD commit was before the last migration HEAD commit
     */
    isReversed: boolean;
}
export declare class Commit {
    /** The commit SHA1 */
    sha1: string;
    /** The commit message, without tasks */
    message?: string;
    /** Migrations that should be run, in the order they were defined in the commit message */
    tasks: TaskList;
    /** The first 6 letters of the SHA1 */
    readonly shortSha1: string;
    /** The first line of the commit message */
    readonly subject: string | undefined;
    constructor(options: {
        sha1: string;
        message?: string;
        tasks?: TaskList;
    });
    /**
     * Loads more info by using `git show <sha1>`
     */
    loadSubject(): Promise<void>;
    toString(): string;
}
/**
 * Gets all commits in the migration dir since the last migration head
 * @param from The commit sha1 of the commit when the last migration was running
 */
export declare function getNewCommits(since?: Commit): Promise<CommitSequence>;
export declare function getConfigurationForCommit(commit: Commit): Promise<MerkelConfiguration | null>;
export declare function addGitHook(): Promise<['appended' | 'created', string]>;
/**
 * Parses the output of `git log --reverse --format=">>>>COMMIT%n%H%n%B" ${lastMigrationHead}`.
 */
export declare function parseGitLog(gitLog: string): CommitSequence;
/**
 * Gets the SHA1 of the current git HEAD
 */
export declare function getHead(): Promise<Commit>;
export declare function getTasksForNewCommit(migrationDir: string): Promise<TaskList>;
export declare function isRevertCommit(message: string): boolean;
