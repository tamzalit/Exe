import { Logger } from '.';
import { Task, TaskType } from './migration';
export declare class InvalidConnectionError extends Error {
    constructor(url: string);
}
export declare class UnsupportedDialectError extends Error {
    constructor(dialect: string);
}
export declare class PendingMigrationTimedOutError extends Error {
    readonly name = "PendingMigrationTimedOutError";
}
export declare class PendingMigrationFoundError extends Error {
    readonly name = "PendingMigrationFoundError";
}
export interface TableRow {
    id: number;
    name: string;
    type: TaskType;
    commit: string | null;
    head: string;
    applied_at: Date | null;
}
export declare abstract class DbAdapter {
    abstract init(): Promise<void>;
    abstract getLastMigrationTask(): Promise<Task | null>;
    abstract beginMigrationTask(task: Task): Promise<void>;
    abstract finishMigrationTask(task: Task): Promise<void>;
    abstract checkIfTaskCanExecute(task: Task): Promise<void>;
    abstract close(): Promise<void>;
    protected abstract hasPendingMigration(): Promise<boolean>;
    waitForPending(logger: Logger): Promise<boolean>;
    protected rowToTask(row: TableRow): Task;
}
export declare function createAdapterFromUrl(url: string): DbAdapter;
