import { DbAdapter } from './adapter';
import { Commit, CommitSequence } from './git';
import { Task } from './migration';
export * from './git';
export * from './migration';
export * from './adapter';
export * from './adapters/postgres';
export declare const CLI_LOGGER: Logger;
export declare const SILENT_LOGGER: Logger;
export declare class TemplateNotFoundError extends Error {
    constructor(templateDir: string);
}
export declare class Status {
    /** The current HEAD commit of the repository */
    head: Commit;
    /** New commits since the last migration */
    newCommits: CommitSequence;
    /** The last migration task that was executed, according to the merkel metadata table */
    lastTask: Task | null;
    constructor(options: {
        head: Commit;
        newCommits: CommitSequence;
        lastTask: Task | null;
    });
    /** Executes all tasks for newCommits */
    executePendingTasks(migrationDir: string, adapter: DbAdapter, logger?: Logger): Promise<void>;
    /** Returns a string that can be printed to a CLI */
    toString(): string;
}
/**
 * Returns an object with information about the current status of the repository
 * @param adapter the database adapter to use. Create one with [[createAdapterFromUrl]]
 * @param head The current HEAD commit. If not given, will ask git
 */
export declare function getStatus(adapter: DbAdapter, head?: Commit): Promise<Status>;
export interface Logger {
    log(msg: string): void;
    error(msg: string): void;
    warn(msg: string): void;
}
/** Options for [[generate]] */
export interface GenerateOptions {
    /** The directory to generate the migration file in */
    migrationDir: string;
    /** The name of the migration. By default a UUID */
    name?: string;
    /** The path to a template file to use */
    template?: string;
}
/** Options for [[createConfig]] */
export interface MerkelConfiguration {
    /** The directory where new migration files should be generated */
    migrationDir: string;
    /**
     * The directory where the JavaScript migration files can be found.
     * Can differ from `migrationDir` when using a transpiler.
     */
    migrationOutDir: string;
}
/**
 * Checks if a folder has a .merkelrc.json file
 */
export declare function isMerkelRepository(): Promise<boolean>;
/**
 * Creates the migration directory
 */
export declare function createMigrationDir(migrationDir: string): Promise<boolean>;
/**
 * Creates a new .merkelrc.json
 */
export declare function createConfig(config: MerkelConfiguration): Promise<void>;
/**
 * Prepares a commit message for git by adding merkel commands to it.
 * @param msgfile The path to the file with the commit message
 */
export declare function prepareCommitMsg(msgfile: string, migrationDir: string, logger?: Logger): Promise<void>;
export declare class MigrationAlreadyExistsError extends Error {
    constructor(file: string);
}
/**
 * Generates a new migration file
 */
export declare function generate(options: GenerateOptions, logger?: Logger): Promise<string>;
